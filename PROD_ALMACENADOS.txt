create or replace NONEDITIONABLE PROCEDURE          "ALL_CONCILIATION" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
      TBL_GAI_CONCILIACION.COD_CONCILIACION,
      TBL_GAI_CONCILIACION.NOMBRE_CONCILIACION, 
      TBL_GAI_CONCILIACION.DESCRIPCION,
      TBL_GAI_CONCILIACION.TABLA_DESTINO,
      TBL_GAI_CONCILIACION.ESTADO,
      TBL_GAI_CONCILIACION.APROBACION,
      TBL_GAI_CONCILIACION.CAMPOS_TABLA_DESTINO,
      TBL_GAI_CONCILIACION.USUARIO_ASIGNADO,
      TBL_GAI_CONCILIACION.EMAILS,
      TBL_GAI_CONCILIACION.COD_POLITICA,
      TBL_GAI_CONCILIACION.REQUIERE_APROBACION,
      TBL_GAI_CONCILIACION.TIPO_OPERACION,
      TBL_GAI_CONCILIACION.OPERADORA,
      TBL_GAI_CONCILIACION.SOX,
      TBL_GAI_CONCILIACION.TIPO_ASIGNACION,
      TBL_GAI_CONCILIACION.KPI,
      TBL_GAI_CONCILIACION.FRECUENCIA_MES,
      TBL_GAI_CONCILIACION.TOMA,
      TBL_GAI_CONCILIACION.EJECUCION,
      TBL_GAI_CONCILIACION.ANALISIS_REPORTE,
      TBL_GAI_CONCILIACION.SEGUIMIENTO,
      TBL_GAI_CONCILIACION.FECHA_PROGRAMADA,
      TBL_GAI_CONCILIACION.FECHA_ENTREGA,
      TBL_GAI_CONCILIACION.OBSERVACIONES,
      TBL_GAI_CONCILIACION.PRUEBA_FECHA,
      TBL_GAI_CONCILIACION.REQ,
      TBL_GAI_CONCILIACION.FECHA_CREACION,
      TBL_GAI_CONCILIACION.FECHA_ACTUALIZACION,
      TBL_GAI_POLITICA.NOMBRE_POLITICA,
      TBL_GAI_POLITICA.ESTADO_POLITICA
      
FROM
    TBL_GAI_CONCILIACION
    INNER JOIN TBL_GAI_POLITICA 
    ON TBL_GAI_CONCILIACION.COD_POLITICA = TBL_GAI_POLITICA.COD_POLITICA
    ORDER BY TBL_GAI_CONCILIACION.COD_CONCILIACION;
DBMS_SQL.RETURN_RESULT(P_CURSOR);

END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "ALL_CONSISTENCIES_POST_FACT" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT *
FROM
    TBL_GAI_155_CONC_CONSISTENCIAS_CARGO_FACT
    ORDER BY CO_ID;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE ALL_LOAD_CONTROL AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
      PAQUETE,
      TABLA,
      PERIODICIDAD,
      RESPALDO,
      ESTADO,
      ERROR,
      ULTIMA_CARGA,
      ULTIMA_EJECUCION,
      SESION,
      RUTA_LOCAL_SQLUNLOAD,
      FLAG_SISNOT_INICIO,
      FLAG_SISNOT_OK,
      FLAG_SISNOT_KO,
      FECHA_INICIAL,
      FECHA_FINAL,
      FORMULA_FECHA_INICIAL,
      FORMULA_FECHA_FINAL,
      FLAG_DROP,
      FLAG_ESTADISTICAS,
      FLAG_DEP,
      DIAS_DEP
FROM
    TBL_GAI_CONTROL_CARGA
    WHERE PAQUETE LIKE '%0552%'
    ORDER BY PAQUETE;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "ALL_PARAMETERS" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT 
    TBL_GAI_PARAMETROS.COD_PARAMETRO,
    TBL_GAI_PARAMETROS.PARAMETRO,
    TBL_GAI_PARAMETROS.VALOR,
    TBL_GAI_PARAMETROS.DESCRIPCION,
    TBL_GAI_PARAMETROS.FECHA_CREACION,
    TBL_GAI_PARAMETROS.FECHA_ACTUALIZACION,
    TBL_GAI_PARAMETROS.TIPO,
    TBL_GAI_PARAMETROS.COD_PADRE,
    TBL_GAI_PARAMETROS.VALOR1,
    TBL_GAI_PARAMETROS.ESTADO_PARAMETRO,
    TBL_GAI_ESCENARIO.NOMBRE_ESCENARIO
FROM
    TBL_GAI_PARAMETROS
    INNER JOIN TBL_GAI_ESCENARIO
    ON TBL_GAI_PARAMETROS.COD_PADRE = TBL_GAI_ESCENARIO.COD_ESCENARIO
    ORDER BY COD_PARAMETRO;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "ALL_POLICY" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
      COD_POLITICA,
      NOMBRE_POLITICA,
      DESCRIPCION,
      OBJETIVO,
      FECHA_CREACION,
      FECHA_ACTUALIZACION,
      ESTADO_POLITICA
FROM
    TBL_GAI_POLITICA
    ORDER BY COD_POLITICA;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "ALL_ROLE" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
  ID_ROL,
  DESCRIPCION_ROL
FROM
    TBL_GAI_ROLES_APPWEB
    ORDER BY ID_ROL;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "ALL_SCENARY" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
    TBL_GAI_ESCENARIO.COD_ESCENARIO,
    TBL_GAI_ESCENARIO.NOMBRE_ESCENARIO, 
    TBL_GAI_ESCENARIO.DESCRIPCION,
    TBL_GAI_ESCENARIO.IMPACTO,
    TBL_GAI_ESCENARIO.COD_CONCILIACION,
    TBL_GAI_ESCENARIO.FECHA_CREACION,
    TBL_GAI_ESCENARIO.FECHA_ACTUALIZACION,
    TBL_GAI_ESCENARIO.ESTADO_ESCENARIO,
    TBL_GAI_CONCILIACION.NOMBRE_CONCILIACION,
    TBL_GAI_CONCILIACION.ESTADO as ESTADO_CONCILIACION
FROM
    TBL_GAI_ESCENARIO
    INNER JOIN TBL_GAI_CONCILIACION 
    ON TBL_GAI_ESCENARIO.COD_CONCILIACION = TBL_GAI_CONCILIACION.COD_CONCILIACION
    ORDER BY COD_ESCENARIO;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "ALL_SUMMARY_SCENARY" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
    TBL_FACT_GAI_RESUMEN_ESCENARIO.SK_CONCILIACION,
    TBL_FACT_GAI_RESUMEN_ESCENARIO.SK_ESCENARIO,
    TBL_FACT_GAI_RESUMEN_ESCENARIO.VAL_BENEFICIO,
    TBL_FACT_GAI_RESUMEN_ESCENARIO.VAL_INCONSISTENCIAS,
    TBL_FACT_GAI_RESUMEN_ESCENARIO.VAL_PQR,
    TBL_FACT_GAI_RESUMEN_ESCENARIO.VAL_REINCIDENCIAS,
    TBL_FACT_GAI_RESUMEN_ESCENARIO.FEC_CARGA_DWH,
    TBL_FACT_GAI_RESUMEN_ESCENARIO.ESTADO_CONCILIACION,
    TBL_DIM_ESCENARIO_T1.COD_CONCILIACION,
    TBL_DIM_ESCENARIO_T1.COD_ESCENARIO
FROM
    TBL_FACT_GAI_RESUMEN_ESCENARIO
    INNER JOIN TBL_DIM_ESCENARIO_T1
    ON TBL_FACT_GAI_RESUMEN_ESCENARIO.SK_ESCENARIO = TBL_DIM_ESCENARIO_T1.SK_ESCENARIO
    ORDER BY TBL_FACT_GAI_RESUMEN_ESCENARIO.SK_ESCENARIO;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "ALL_USER" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
      TBL_GAI_USUARIO.COD_USUARIO,
      TBL_GAI_USUARIO.USUARIO,
      TBL_GAI_USUARIO.EMAIL,
      TBL_GAI_USUARIO.ID_ROL,
      TBL_GAI_USUARIO.NOMBRE_USUARIO,
      TBL_GAI_USUARIO.CONTRASEÑA,
      TBL_GAI_USUARIO.FECHA_CREACION,
      TBL_GAI_USUARIO.FECHA_ACTUALIZACION,
      TBL_GAI_USUARIO.PRIMER_ACCESO,
      TBL_GAI_USUARIO.ESTADO_USUARIO,
      TBL_GAI_ROLES_APPWEB.DESCRIPCION_ROL
FROM
    TBL_GAI_USUARIO
    INNER JOIN TBL_GAI_ROLES_APPWEB 
    ON TBL_GAI_ROLES_APPWEB.ID_ROL = TBL_GAI_USUARIO.ID_ROL
    ORDER BY COD_USUARIO;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "COUNT_CONCILIATION" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
  COUNT(COD_CONCILIACION)
FROM
    TBL_GAI_CONCILIACION;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "COUNT_POLICY" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
  COUNT(COD_POLITICA) AS TOTAL
FROM
    TBL_GAI_POLITICA;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "COUNT_SCENARY" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
  COUNT(COD_ESCENARIO)
FROM
    TBL_GAI_ESCENARIO;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE "COUNT_TBL_DYNAMIC" (
  p_table_name IN VARCHAR2,
  p_total_rows OUT NUMBER
) AS
  -- Construir la consulta din᭩ca de manera segura
  v_sql VARCHAR2(4000);
  -- Declarar un cursor din᭩co
  dynamic_cursor SYS_REFCURSOR;
BEGIN
  -- Construir la consulta din᭩ca
  v_sql := 'SELECT COUNT(*) FROM ' || DBMS_ASSERT.SIMPLE_SQL_NAME(p_table_name);

  -- Abrir el cursor y obtener el resultado del recuento
  OPEN dynamic_cursor FOR v_sql;
  FETCH dynamic_cursor INTO p_total_rows;
  CLOSE dynamic_cursor;

  -- No mostrar el resultado con DBMS_OUTPUT, ya que no es accesible desde ASP.NET Core

END COUNT_TBL_DYNAMIC;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "COUNT_USER" AS
P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
  COUNT(COD_USUARIO)
FROM
    TBL_GAI_USUARIO;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "INSERT_AUDIT" 
(
  PARAM_FECHA_CAMBIO IN "DATE",
  PARAM_COD_USUARIO IN "INT",
  PARAM_ACCION IN "VARCHAR",
  PARAM_COMPONENTE IN "VARCHAR",
  PARAM_VALOR_ANTERIOR IN "VARCHAR"
) AS 
BEGIN
  INSERT INTO TBL_GAI_AUDITORIA_APPWEB (FECHA_CAMBIO,COD_USUARIO,ACCION,COMPONENTE,VALOR_ANTERIOR)
  VALUES(PARAM_FECHA_CAMBIO,PARAM_COD_USUARIO,PARAM_ACCION,PARAM_COMPONENTE,PARAM_VALOR_ANTERIOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "INSERT_CONCILIATION" 
(
  PARAM_NOMBRE_CONCILIACION IN "VARCHAR",
  PARAM_DESCRIPCION IN "VARCHAR",
  PARAM_TABLA_DESTINO IN "VARCHAR",
  PARAM_APROBACION IN "VARCHAR",
  PARAM_CAMPOS_TABLA_DESTINO IN "VARCHAR",
  PARAM_USUARIO_ASIGNADO IN "VARCHAR",
  PARAM_EMAILS IN "VARCHAR",
  PARAM_COD_POLITICA IN "NUMBER",
  PARAM_REQUIERE_APROBACION IN "VARCHAR",
  PARAM_TIPO_OPERACION IN "VARCHAR",
  PARAM_OPERADORA IN "VARCHAR",
  PARAM_SOX IN "VARCHAR",
  PARAM_TIPO_ASIGNACION IN "VARCHAR",
  PARAM_KPI IN "VARCHAR",
  PARAM_FRECUENCIA_MES IN "NUMBER",
  PARAM_TOMA IN "NUMBER",
  PARAM_EJECUCION IN "NUMBER",
  PARAM_ANALISIS_REPORTE IN "NUMBER",
  PARAM_SEGUIMIENTO IN "NUMBER",
  PARAM_FECHA_PROGRAMADA IN "VARCHAR",
  PARAM_FECHA_ENTREGA IN "VARCHAR",
  PARAM_OBSERVACIONES IN "VARCHAR",
  PARAM_PRUEBA_FECHA IN "VARCHAR",
  PARAM_REQ IN "VARCHAR",
  PARAM_ESTADO IN "VARCHAR"
) AS 
BEGIN
  INSERT INTO TBL_GAI_CONCILIACION (NOMBRE_CONCILIACION,DESCRIPCION,TABLA_DESTINO,ESTADO,APROBACION,CAMPOS_TABLA_DESTINO,USUARIO_ASIGNADO,EMAILS,
  COD_POLITICA,REQUIERE_APROBACION,TIPO_OPERACION,OPERADORA,SOX,TIPO_ASIGNACION,KPI,FRECUENCIA_MES,TOMA,EJECUCION,ANALISIS_REPORTE,SEGUIMIENTO,FECHA_PROGRAMADA,
  FECHA_ENTREGA,OBSERVACIONES,FECHA_CREACION,FECHA_ACTUALIZACION,PRUEBA_FECHA,REQ)
  VALUES(PARAM_NOMBRE_CONCILIACION,PARAM_DESCRIPCION,PARAM_TABLA_DESTINO,PARAM_ESTADO,PARAM_APROBACION,PARAM_CAMPOS_TABLA_DESTINO,PARAM_USUARIO_ASIGNADO,
  PARAM_EMAILS,PARAM_COD_POLITICA,PARAM_REQUIERE_APROBACION,PARAM_TIPO_OPERACION,PARAM_OPERADORA,PARAM_SOX,PARAM_TIPO_ASIGNACION,PARAM_KPI,
  PARAM_FRECUENCIA_MES,PARAM_TOMA,PARAM_EJECUCION,PARAM_ANALISIS_REPORTE,PARAM_SEGUIMIENTO,PARAM_FECHA_PROGRAMADA,PARAM_FECHA_ENTREGA,PARAM_OBSERVACIONES,SYSDATE,SYSDATE,PARAM_PRUEBA_FECHA,PARAM_REQ);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "INSERT_PARAMETER" 
(
  PARAM_PARAMETRO IN "VARCHAR",
  PARAM_VALOR IN "VARCHAR",
  PARAM_DESCRIPCION IN "VARCHAR",
  PARAM_TIPO IN "VARCHAR",
  PARAM_COD_PADRE IN "VARCHAR",
  PARAM_VALOR1 IN "VARCHAR",
  PARAM_ESTADO_PARAMETRO IN "VARCHAR"
) AS 
BEGIN
  INSERT INTO TBL_GAI_PARAMETROS (PARAMETRO,VALOR,DESCRIPCION,FECHA_CREACION,FECHA_ACTUALIZACION,TIPO,COD_PADRE,VALOR1,ESTADO_PARAMETRO)
  VALUES(PARAM_PARAMETRO,PARAM_VALOR,PARAM_DESCRIPCION,SYSDATE,SYSDATE,PARAM_TIPO,PARAM_COD_PADRE,PARAM_VALOR1, PARAM_ESTADO_PARAMETRO);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "INSERT_POLICY" 
(
  PARAM_NAME IN "VARCHAR",
  PARAM_DESCRIPTION IN "VARCHAR",
  PARAM_OBJETIVO IN "VARCHAR",
  PARAM_ESTADO_POLITICA IN "VARCHAR"
) AS 
BEGIN
  INSERT INTO TBL_GAI_POLITICA (NOMBRE_POLITICA,DESCRIPCION,OBJETIVO,FECHA_CREACION,FECHA_ACTUALIZACION,ESTADO_POLITICA)
  VALUES(PARAM_NAME,PARAM_DESCRIPTION,PARAM_OBJETIVO,SYSDATE,SYSDATE,PARAM_ESTADO_POLITICA);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "INSERT_SCENARY" 
(
  PARAM_NOMBRE_ESCENARIO IN "VARCHAR",
  PARAM_DESCRIPCION IN "VARCHAR",
  PARAM_IMPACTO IN "VARCHAR",
  PARAM_COD_CONCILIACION IN "NUMBER",
  PARAM_ESTADO_ESCENARIO IN "VARCHAR"
) AS 
BEGIN
  INSERT INTO TBL_GAI_ESCENARIO (NOMBRE_ESCENARIO,DESCRIPCION,IMPACTO,FECHA_CREACION,FECHA_ACTUALIZACION,COD_CONCILIACION,ESTADO_ESCENARIO)
  VALUES(PARAM_NOMBRE_ESCENARIO,PARAM_DESCRIPCION,PARAM_IMPACTO,SYSDATE,SYSDATE,PARAM_COD_CONCILIACION,PARAM_ESTADO_ESCENARIO);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "INSERT_USER" 
(
  PARAM_USUARIO IN "VARCHAR",
  PARAM_EMAIL IN "VARCHAR",
  PARAM_NOMBRE_USUARIO IN "VARCHAR",
  PARAM_IDROL IN "NUMBER",
  PARAM_ESTADO_USUARIO IN "VARCHAR",
  PARAM_PRIMER_ACCESO IN "VARCHAR",
  PARAM_CONTRASEÑA IN "VARCHAR"
) AS 
BEGIN
  INSERT INTO TBL_GAI_USUARIO (USUARIO,EMAIL,NOMBRE_USUARIO,ID_ROL,FECHA_CREACION,FECHA_ACTUALIZACION,ESTADO_USUARIO,PRIMER_ACCESO, CONTRASEÑA)
  VALUES(PARAM_USUARIO,PARAM_EMAIL,PARAM_NOMBRE_USUARIO,PARAM_IDROL,SYSDATE,SYSDATE,PARAM_ESTADO_USUARIO,PARAM_PRIMER_ACCESO,PARAM_CONTRASEÑA);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "PAGINATOR_CONCILIATION" 
(
    PARAM_PAGE NUMBER,
    PARAM_ROW NUMBER
)
AS
  p_cursor sys_refcursor;
  v_offset NUMBER;
BEGIN
  -- Calculate the offset based on the page and row parameters
  v_offset := (PARAM_PAGE - 1) * PARAM_ROW;

  OPEN p_cursor FOR
    SELECT *
    FROM (
      SELECT
        ROW_NUMBER() OVER (ORDER BY COD_CONCILIACION ASC) AS rn,
        p.COD_CONCILIACION,
        p.NOMBRE_CONCILIACION, 
        p.DESCRIPCION,
        p.TABLA_DESTINO,
        p.ESTADO,
        p.APROBACION,
        p.CAMPOS_TABLA_DESTINO,
        p.USUARIO_ASIGNADO,
        p.EMAILS,
        p.COD_POLITICA,
        p.REQUIERE_APROBACION,
        p.TIPO_OPERACION,
        p.OPERADORA,
        p.SOX,
        p.TIPO_ASIGNACION,
        p.KPI,
        p.FRECUENCIA_MES,
        p.TOMA,
        p.EJECUCION,
        p.ANALISIS_REPORTE,
        p.SEGUIMIENTO,
        p.FECHA_PROGRAMADA,
        p.FECHA_ENTREGA,
        p.OBSERVACIONES,
        p.PRUEBA_FECHA,
        p.REQ,
        p.FECHA_CREACION,
        p.FECHA_ACTUALIZACION,
        a.NOMBRE_POLITICA,
        a.ESTADO_POLITICA
      FROM
        TBL_GAI_CONCILIACION p 
        INNER JOIN TBL_GAI_POLITICA a ON p.COD_POLITICA = a.COD_POLITICA
        ORDER BY p.COD_CONCILIACION
    )
    WHERE rn > v_offset AND rn <= v_offset + PARAM_ROW;

  dbms_sql.return_result(p_cursor);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE PAGINATOR_LOAD_CONTROL
(
    PARAM_PAGE NUMBER,
    PARAM_ROW NUMBER
)
AS
  p_cursor sys_refcursor;
  v_offset NUMBER;
BEGIN
  -- Calculate the offset based on the page and row parameters
  v_offset := (PARAM_PAGE - 1) * PARAM_ROW;

  OPEN p_cursor FOR
    SELECT *
    FROM (
      SELECT
        ROW_NUMBER() OVER (ORDER BY FECHA_INICIAL ASC) AS rn,
        p.*
      FROM
        TBL_GAI_CONTROL_CARGA p
        WHERE PAQUETE LIKE '%0552%'
        ORDER BY p.PAQUETE
    )
    WHERE rn > v_offset AND rn <= v_offset + PARAM_ROW;

  dbms_sql.return_result(p_cursor);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "PAGINATOR_PARAMETER" 
(
    PARAM_PAGE NUMBER,
    PARAM_ROW NUMBER
)
AS
  p_cursor sys_refcursor;
  v_offset NUMBER;
BEGIN
  -- Calculate the offset based on the page and row parameters
  v_offset := (PARAM_PAGE - 1) * PARAM_ROW;

  OPEN p_cursor FOR
    SELECT *
    FROM (
      SELECT
        ROW_NUMBER() OVER (ORDER BY COD_PARAMETRO ASC) AS rn,
        p.COD_PARAMETRO,
        p.PARAMETRO,
        p.VALOR,
        p.DESCRIPCION,
        p.FECHA_CREACION,
        p.FECHA_ACTUALIZACION,
        p.TIPO,
        p.COD_PADRE,
        p.VALOR1,
        p.ESTADO_PARAMETRO,
        a.NOMBRE_ESCENARIO
      FROM
        TBL_GAI_PARAMETROS p
        INNER JOIN TBL_GAI_ESCENARIO a ON p.COD_PADRE = a.COD_ESCENARIO
        ORDER BY p.COD_PARAMETRO
    )
    WHERE rn > v_offset AND rn <= v_offset + PARAM_ROW;

  dbms_sql.return_result(p_cursor);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "PAGINATOR_POLICY" 
(
    PARAM_PAGE NUMBER,
    PARAM_ROW NUMBER
)
AS
  p_cursor sys_refcursor;
  v_offset NUMBER;
BEGIN
  -- Calculate the offset based on the page and row parameters
  v_offset := (PARAM_PAGE - 1) * PARAM_ROW;

  OPEN p_cursor FOR
    SELECT *
    FROM (
      SELECT
        ROW_NUMBER() OVER (ORDER BY COD_POLITICA ASC) AS rn,
        p.*
      FROM
        TBL_GAI_POLITICA p
        ORDER BY p.COD_POLITICA
    )
    WHERE rn > v_offset AND rn <= v_offset + PARAM_ROW;

  dbms_sql.return_result(p_cursor);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "PAGINATOR_SCENARY" 
(
    PARAM_PAGE NUMBER,
    PARAM_ROW NUMBER
)
AS
  p_cursor sys_refcursor;
  v_offset NUMBER;
BEGIN
  -- Calculate the offset based on the page and row parameters
  v_offset := (PARAM_PAGE - 1) * PARAM_ROW;

  OPEN p_cursor FOR
    SELECT *
    FROM (
      SELECT
        ROW_NUMBER() OVER (ORDER BY COD_ESCENARIO ASC) AS rn,
        p.COD_ESCENARIO,
        p.NOMBRE_ESCENARIO, 
        p.DESCRIPCION,
        p.IMPACTO,
        p.COD_CONCILIACION,
        p.FECHA_CREACION,
        p.FECHA_ACTUALIZACION,
        p.ESTADO_ESCENARIO,
        a.NOMBRE_CONCILIACION,
        a.ESTADO as ESTADO_CONCILIACION
      FROM
        TBL_GAI_ESCENARIO p
        INNER JOIN TBL_GAI_CONCILIACION a ON p.COD_CONCILIACION = a.COD_CONCILIACION
        ORDER BY p.COD_ESCENARIO
    )
    WHERE rn > v_offset AND rn <= v_offset + PARAM_ROW;

  dbms_sql.return_result(p_cursor);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "PAGINATOR_SUMMARY_SCENARY" 
(
    PARAM_PAGE NUMBER,
    PARAM_ROW NUMBER
)
AS
  p_cursor sys_refcursor;
  v_offset NUMBER;
BEGIN
  -- Calculate the offset based on the page and row parameters
  v_offset := (PARAM_PAGE - 1) * PARAM_ROW;

  OPEN p_cursor FOR
    SELECT *
    FROM (
      SELECT
        ROW_NUMBER() OVER (ORDER BY SK_CONCILIACION ASC) AS rn,
        p.SK_CONCILIACION,
        p.SK_ESCENARIO,
        p.VAL_BENEFICIO,
        p.VAL_INCONSISTENCIAS,
        p.VAL_PQR,
        p.VAL_REINCIDENCIAS,
        p.FEC_CARGA_DWH,
        p.ESTADO_CONCILIACION,
        a.COD_CONCILIACION,
        a.COD_ESCENARIO
      FROM
        TBL_FACT_GAI_RESUMEN_ESCENARIO p 
        INNER JOIN TBL_DIM_ESCENARIO_T1 a ON p.SK_ESCENARIO = a.SK_ESCENARIO
        ORDER BY p.SK_ESCENARIO
    )
    WHERE rn > v_offset AND rn <= v_offset + PARAM_ROW;

  dbms_sql.return_result(p_cursor);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "PAGINATOR_USER" 
(
    PARAM_PAGE NUMBER,
    PARAM_ROW NUMBER
)
AS
  p_cursor sys_refcursor;
  v_offset NUMBER;
BEGIN
  -- Calculate the offset based on the page and row parameters
  v_offset := (PARAM_PAGE - 1) * PARAM_ROW;

  OPEN p_cursor FOR
    SELECT *
    FROM (
      SELECT
        ROW_NUMBER() OVER (ORDER BY COD_USUARIO ASC) AS rn,
          p.COD_USUARIO,
          p.USUARIO,
          p.EMAIL,
          p.ID_ROL,
          p.NOMBRE_USUARIO,
          p.CONTRASEÑA,
          p.FECHA_CREACION,
          p.FECHA_ACTUALIZACION,
          p.PRIMER_ACCESO,
          p.ESTADO_USUARIO,
          a.DESCRIPCION_ROL
      FROM
        TBL_GAI_USUARIO p
        INNER JOIN TBL_GAI_ROLES_APPWEB a ON p.ID_ROL = a.ID_ROL
        ORDER BY p.COD_USUARIO
    )
    WHERE rn > v_offset AND rn <= v_offset + PARAM_ROW;

  dbms_sql.return_result(p_cursor);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE "SELECT_BY_CONCILIATION_PARAMETERS"
(
    PARAM_NOMBRE_CONCILIACION IN "VARCHAR"
) AS 
P_CURSOR SYS_REFCURSOR;
BEGIN
    OPEN P_CURSOR FOR SELECT
      TBL_GAI_PARAMETROS.COD_PARAMETRO,
      TBL_GAI_PARAMETROS.PARAMETRO,
      TBL_GAI_PARAMETROS.VALOR,
      TBL_GAI_PARAMETROS.DESCRIPCION,
      TBL_GAI_PARAMETROS.FECHA_CREACION,
      TBL_GAI_PARAMETROS.FECHA_ACTUALIZACION,
      TBL_GAI_PARAMETROS.COD_PADRE,
      TBL_GAI_PARAMETROS.TIPO,
      TBL_GAI_PARAMETROS.VALOR1,
      TBL_GAI_PARAMETROS.ESTADO_PARAMETRO,
      TBL_GAI_ESCENARIO.NOMBRE_ESCENARIO
FROM
    TBL_GAI_PARAMETROS
    INNER JOIN TBL_GAI_ESCENARIO
    ON TBL_GAI_PARAMETROS.COD_PADRE = TBL_GAI_ESCENARIO.COD_ESCENARIO
    INNER JOIN TBL_GAI_CONCILIACION
    ON TBL_GAI_ESCENARIO.COD_CONCILIACION = TBL_GAI_CONCILIACION.COD_CONCILIACION
    WHERE TBL_GAI_CONCILIACION.NOMBRE_CONCILIACION = PARAM_NOMBRE_CONCILIACION;
DBMS_SQL.RETURN_RESULT(P_CURSOR);
END SELECT_BY_CONCILIATION_PARAMETERS;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "SELECT_BY_ID_CONCILIATION" 
(
  PARAM_CODE IN "VARCHAR"  
) AS P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT 
    TBL_GAI_CONCILIACION.COD_CONCILIACION,
    TBL_GAI_CONCILIACION.NOMBRE_CONCILIACION, 
    TBL_GAI_CONCILIACION.DESCRIPCION,
    TBL_GAI_CONCILIACION.TABLA_DESTINO,
    TBL_GAI_CONCILIACION.ESTADO,
    TBL_GAI_CONCILIACION.APROBACION,
    TBL_GAI_CONCILIACION.CAMPOS_TABLA_DESTINO,
    TBL_GAI_CONCILIACION.USUARIO_ASIGNADO,
    TBL_GAI_CONCILIACION.EMAILS,
    TBL_GAI_CONCILIACION.COD_POLITICA,
    TBL_GAI_CONCILIACION.REQUIERE_APROBACION,
    TBL_GAI_CONCILIACION.TIPO_OPERACION,
    TBL_GAI_CONCILIACION.OPERADORA,
    TBL_GAI_CONCILIACION.SOX,
    TBL_GAI_CONCILIACION.TIPO_ASIGNACION,
    TBL_GAI_CONCILIACION.KPI,
    TBL_GAI_CONCILIACION.FRECUENCIA_MES,
    TBL_GAI_CONCILIACION.TOMA,
    TBL_GAI_CONCILIACION.EJECUCION,
    TBL_GAI_CONCILIACION.ANALISIS_REPORTE,
    TBL_GAI_CONCILIACION.SEGUIMIENTO,
    TBL_GAI_CONCILIACION.FECHA_PROGRAMADA,
    TBL_GAI_CONCILIACION.FECHA_ENTREGA,
    TBL_GAI_CONCILIACION.OBSERVACIONES,
    TBL_GAI_CONCILIACION.PRUEBA_FECHA,
    TBL_GAI_CONCILIACION.REQ,
    TBL_GAI_CONCILIACION.FECHA_CREACION,
    TBL_GAI_CONCILIACION.FECHA_ACTUALIZACION,
    TBL_GAI_POLITICA.NOMBRE_POLITICA,
    TBL_GAI_POLITICA.ESTADO_POLITICA
  FROM TBL_GAI_CONCILIACION
  INNER JOIN TBL_GAI_POLITICA 
    ON TBL_GAI_CONCILIACION.COD_POLITICA = TBL_GAI_POLITICA.COD_POLITICA
    WHERE COD_CONCILIACION = PARAM_CODE;
    DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "SELECT_BY_ID_LOAD_CONTROL" 
(
  PARAM_PACKAGE IN "VARCHAR"  
) AS P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT *
  FROM TBL_GAI_CONTROL_CARGA
    WHERE PAQUETE = PARAM_PACKAGE;
    DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "SELECT_BY_ID_PARAMETER" 
(
  PARAM_CODE IN "VARCHAR"  
) AS P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
        TBL_GAI_PARAMETROS.COD_PARAMETRO,
        TBL_GAI_PARAMETROS.PARAMETRO,
        TBL_GAI_PARAMETROS.VALOR,
        TBL_GAI_PARAMETROS.DESCRIPCION,
        TBL_GAI_PARAMETROS.FECHA_CREACION,
        TBL_GAI_PARAMETROS.FECHA_ACTUALIZACION,
        TBL_GAI_PARAMETROS.TIPO,
        TBL_GAI_PARAMETROS.COD_PADRE,
        TBL_GAI_PARAMETROS.VALOR1,
        TBL_GAI_PARAMETROS.ESTADO_PARAMETRO,
        TBL_GAI_ESCENARIO.NOMBRE_ESCENARIO
  FROM TBL_GAI_PARAMETROS
    INNER JOIN TBL_GAI_ESCENARIO
    ON TBL_GAI_PARAMETROS.COD_PADRE = TBL_GAI_ESCENARIO.COD_ESCENARIO
    WHERE COD_PARAMETRO = PARAM_CODE;
    DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "SELECT_BY_ID_POLICY" 
(
  PARAM_CODE IN "VARCHAR"  
) AS P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT *
  FROM TBL_GAI_POLITICA 
    WHERE COD_POLITICA = PARAM_CODE;
    DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "SELECT_BY_ID_SCENARY" 
(
  PARAM_CODE IN "VARCHAR"  
) AS P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT
    TBL_GAI_ESCENARIO.COD_ESCENARIO,
    TBL_GAI_ESCENARIO.NOMBRE_ESCENARIO, 
    TBL_GAI_ESCENARIO.DESCRIPCION,
    TBL_GAI_ESCENARIO.IMPACTO,
    TBL_GAI_ESCENARIO.COD_CONCILIACION,
    TBL_GAI_ESCENARIO.FECHA_CREACION,
    TBL_GAI_ESCENARIO.FECHA_ACTUALIZACION,
    TBL_GAI_ESCENARIO.ESTADO_ESCENARIO,
    TBL_GAI_CONCILIACION.NOMBRE_CONCILIACION,
    TBL_GAI_CONCILIACION.ESTADO as ESTADO_CONCILIACION
  FROM TBL_GAI_ESCENARIO
   INNER JOIN TBL_GAI_CONCILIACION 
    ON TBL_GAI_ESCENARIO.COD_CONCILIACION = TBL_GAI_CONCILIACION.COD_CONCILIACION
    WHERE COD_ESCENARIO = PARAM_CODE;
    DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "SELECT_BY_ID_USER" 
(
  PARAM_CODE IN "VARCHAR"  
) AS P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT 
      TBL_GAI_USUARIO.COD_USUARIO,
      TBL_GAI_USUARIO.USUARIO,
      TBL_GAI_USUARIO.EMAIL,
      TBL_GAI_USUARIO.ID_ROL,
      TBL_GAI_USUARIO.NOMBRE_USUARIO,
      TBL_GAI_USUARIO.CONTRASEÑA,
      TBL_GAI_USUARIO.FECHA_CREACION,
      TBL_GAI_USUARIO.FECHA_ACTUALIZACION,
      TBL_GAI_USUARIO.PRIMER_ACCESO,
      TBL_GAI_USUARIO.ESTADO_USUARIO,
      TBL_GAI_ROLES_APPWEB.DESCRIPCION_ROL
  FROM TBL_GAI_USUARIO
    INNER JOIN TBL_GAI_ROLES_APPWEB 
    ON TBL_GAI_ROLES_APPWEB.ID_ROL = TBL_GAI_USUARIO.ID_ROL
    WHERE COD_USUARIO = PARAM_CODE;
    DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "SELECY_BY_USERNAME_OR_EMAIL_USER" 
(
  PARAM_USERNAME_OR_EMAIL IN "VARCHAR"  
) AS P_CURSOR SYS_REFCURSOR;
BEGIN
  OPEN P_CURSOR FOR SELECT 
      TBL_GAI_USUARIO.COD_USUARIO,
      TBL_GAI_USUARIO.USUARIO,
      TBL_GAI_USUARIO.EMAIL,
      TBL_GAI_USUARIO.ID_ROL,
      TBL_GAI_USUARIO.NOMBRE_USUARIO,
      TBL_GAI_USUARIO.CONTRASEÑA,
      TBL_GAI_USUARIO.FECHA_CREACION,
      TBL_GAI_USUARIO.FECHA_ACTUALIZACION,
      TBL_GAI_USUARIO.PRIMER_ACCESO,
      TBL_GAI_USUARIO.ESTADO_USUARIO,
      TBL_GAI_ROLES_APPWEB.DESCRIPCION_ROL
  FROM TBL_GAI_USUARIO
    INNER JOIN TBL_GAI_ROLES_APPWEB 
    ON TBL_GAI_ROLES_APPWEB.ID_ROL = TBL_GAI_USUARIO.ID_ROL
    WHERE TBL_GAI_USUARIO.USUARIO = PARAM_USERNAME_OR_EMAIL OR  TBL_GAI_USUARIO.EMAIL = PARAM_USERNAME_OR_EMAIL;
    DBMS_SQL.RETURN_RESULT(P_CURSOR);
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "UPDATE_CONCILIATION" 
(
  PARAM_CODE IN "VARCHAR",
  PARAM_NOMBRE_CONCILIACION IN "VARCHAR",
  PARAM_DESCRIPCION IN "VARCHAR",
  PARAM_EMAILS IN "VARCHAR",
  PARAM_COD_POLITICA IN "NUMBER",
  PARAM_REQUIERE_APROBACION IN "VARCHAR",
  PARAM_TIPO_OPERACION IN "VARCHAR",
  PARAM_TIPO_ASIGNACION IN "VARCHAR",
  PARAM_TABLA_DESTINO IN "VARCHAR",
  PARAM_ESTADO IN "VARCHAR"
) AS 
BEGIN
  UPDATE TBL_GAI_CONCILIACION 
  SET NOMBRE_CONCILIACION = PARAM_NOMBRE_CONCILIACION, 
  DESCRIPCION = PARAM_DESCRIPCION,
  EMAILS = PARAM_EMAILS,
  COD_POLITICA = PARAM_COD_POLITICA,
  REQUIERE_APROBACION = PARAM_REQUIERE_APROBACION,
  TIPO_OPERACION = PARAM_TIPO_OPERACION,
  TIPO_ASIGNACION = PARAM_TIPO_ASIGNACION,
  FECHA_ACTUALIZACION = SYSDATE,
  TABLA_DESTINO = PARAM_TABLA_DESTINO,
  ESTADO = PARAM_ESTADO

    WHERE COD_CONCILIACION = PARAM_CODE;
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE UPDATE_LOAD_CONTROL
(
  PARAM_PACKAGE IN "VARCHAR",
  PARAM_TABLA IN "VARCHAR",
  PARAM_PERIODICIDAD IN "VARCHAR",
  PARAM_ESTADO IN "VARCHAR",
  PARAM_ERROR IN "VARCHAR",
  PARAM_ULTIMA_CARGA IN "DATE",
  PARAM_ULTIMA_EJECUCION IN "DATE"
) AS 
BEGIN
  UPDATE TBL_GAI_CONTROL_CARGA 
  SET TABLA = PARAM_TABLA,
      PERIODICIDAD = PARAM_PERIODICIDAD,
      ESTADO = PARAM_ESTADO,
      ERROR = PARAM_ERROR,
      ULTIMA_CARGA = PARAM_ULTIMA_CARGA,
      ULTIMA_EJECUCION = PARAM_ULTIMA_EJECUCION
    WHERE PAQUETE = PARAM_PACKAGE;
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "UPDATE_PARAMETER" 
(
    PARAM_CODE IN "VARCHAR",
    PARAM_PARAMETRO IN "VARCHAR",
    PARAM_VALOR IN "VARCHAR",
    PARAM_DESCRIPCION IN "VARCHAR",
    PARAM_TIPO IN "VARCHAR",
    PARAM_FATHER_CODE IN "NUMBER",
    PARAM_ESTADO_PARAMETRO IN "NUMBER"
) AS 
BEGIN
  UPDATE TBL_GAI_PARAMETROS 
  SET PARAMETRO = PARAM_PARAMETRO, 
      VALOR = PARAM_VALOR,
      FECHA_ACTUALIZACION = SYSDATE, 
      DESCRIPCION = PARAM_DESCRIPCION,
      TIPO = PARAM_TIPO,
      COD_PADRE = PARAM_FATHER_CODE,
      ESTADO_PARAMETRO = PARAM_ESTADO_PARAMETRO
    WHERE COD_PARAMETRO = PARAM_CODE;
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "UPDATE_POLICY" 
(
  PARAM_CODE IN "VARCHAR",
  PARAM_NAME IN "VARCHAR",
  PARAM_DESCRIPTION IN "VARCHAR",
  PARAM_OBJETIVO IN "VARCHAR",
  PARAM_ESTADO_POLITICA IN "VARCHAR"
) AS 
BEGIN
  UPDATE TBL_GAI_POLITICA 
  SET NOMBRE_POLITICA = PARAM_NAME, 
      DESCRIPCION = PARAM_DESCRIPTION, 
      FECHA_ACTUALIZACION = SYSDATE,
      OBJETIVO = PARAM_OBJETIVO,
      ESTADO_POLITICA = PARAM_ESTADO_POLITICA
    WHERE COD_POLITICA = PARAM_CODE;
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "UPDATE_SCENARY" 
(
    PARAM_CODE IN "VARCHAR",
    PARAM_NOMBRE_ESCENARIO IN "VARCHAR",
    PARAM_IMPACTO IN "VARCHAR",
    PARAM_COD_CONCILIACION IN "NUMBER",
    PARAM_ESTADO_ESCENARIO IN "VARCHAR"
) AS 
BEGIN
  UPDATE TBL_GAI_ESCENARIO
  SET NOMBRE_ESCENARIO = PARAM_NOMBRE_ESCENARIO,
      IMPACTO = PARAM_IMPACTO,
      COD_CONCILIACION = PARAM_COD_CONCILIACION,
      FECHA_ACTUALIZACION = SYSDATE, 
      ESTADO_ESCENARIO = PARAM_ESTADO_ESCENARIO
    WHERE COD_ESCENARIO = PARAM_CODE;
END;

/*_________________________________________________________________________*/

create or replace NONEDITIONABLE PROCEDURE          "UPDATE_USER" 
(
  PARAM_CODE IN "VARCHAR",
  PARAM_USER IN "VARCHAR",
  PARAM_EMAIL IN "VARCHAR",
  PARAM_USER_NAME IN "VARCHAR",
  PARAM_IDROL IN "NUMBER",
  PARAM_PRIMER_ACCESO IN "VARCHAR",
  PARAM_ESTADO_USUARIO IN "VARCHAR",
  PARAM_CONTRASEÑA IN "VARCHAR"
) AS 
BEGIN
  UPDATE TBL_GAI_USUARIO
  SET USUARIO = PARAM_USER, 
      EMAIL = PARAM_EMAIL,
      NOMBRE_USUARIO = PARAM_USER_NAME,
      ID_ROL = PARAM_IDROL,
      PRIMER_ACCESO = PARAM_PRIMER_ACCESO,
      FECHA_ACTUALIZACION = SYSDATE, 
      ESTADO_USUARIO = PARAM_ESTADO_USUARIO,
      CONTRASEÑA = PARAM_CONTRASEÑA
    WHERE COD_USUARIO = PARAM_CODE;
END;